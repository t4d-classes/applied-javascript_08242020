{"version":3,"sources":["hooks/useList.js","components/ToolHeader.js","hooks/useForm.js","components/ColorForm.js","components/ColorTool.js","components/CarViewRow.js","components/CarEditRow.js","components/CarTable.js","components/CarForm.js","components/CarTool.js","hooks/useCarStore.js","index.js"],"names":["useList","initialList","useState","list","setList","item","concat","id","Math","max","map","c","itemIndex","findIndex","i","Error","newList","itemId","filter","ToolHeader","props","className","headerText","useForm","initialForm","form","setForm","e","target","name","type","valueAsNumber","value","ColorForm","hexcode","colorForm","change","resetColorForm","htmlFor","onChange","onClick","onSubmitColor","buttonText","ColorTool","colors","addColor","color","key","CarViewRow","car","editCar","onEditCar","deleteCar","onDeleteCar","make","model","year","price","CarEditRow","carForm","onSaveCar","onCancelCar","CarTable","cars","editCarId","saveCar","cancelCar","nanToValue","isNaN","CarForm","onSubmitCar","resetCarForm","CarTool","initialCars","appendCar","replaceCar","removeCar","setEditCarId","carId","useCarStore","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.36014629.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport const useList = (initialList) => {\n\n  const [ list, setList ] = useState(initialList);\n\n  const appendItem = (item) => {\n    setList(list.concat({\n      ...item,\n      id: Math.max(...list.map(c => c.id), 0) + 1,\n    }));\n  };\n\n  const replaceItem = item => {\n    const itemIndex = list.findIndex(i => i.id === item.id);\n    if (!itemIndex === -1) {\n      throw new Error('unable to find item with id ' + item.id);\n    }\n    const newList = list.concat();\n    newList[itemIndex] = item;\n    setList(newList);\n  }\n\n  const deleteItem = (itemId) => {\n    setList(list.filter(c => c.id !== itemId));\n  };\n\n  return [ list, appendItem, replaceItem, deleteItem ];\n\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ToolHeader = (props) => {\n\n  return (\n    <header>\n      <h1 className=\"page-header\">{props.headerText}</h1>\n    </header>\n  );\n\n};\n\nToolHeader.propTypes = {\n  headerText: PropTypes.string.isRequired,\n};","import { useState } from 'react';\n\nexport const useForm = (initialForm) => {\n\n  const [ form, setForm ] = useState(initialForm);\n\n  const change = (e) => {\n    setForm({\n      ...form,\n      [ e.target.name ]: e.target.type === 'number'\n        ? e.target.valueAsNumber : e.target.value,\n    });\n  };\n\n  return [ form, change, () => setForm(initialForm) ];\n\n};","import React from 'react';\n\nimport { useForm } from '../hooks/useForm';\n\nexport const ColorForm = (props) => {\n\n  const [\n    colorForm,\n    change,\n    resetColorForm,\n  ] = useForm({ name: '', hexcode: '' });\n\n  const submitColor = () => {\n    props.onSubmitColor(colorForm);\n    resetColorForm();\n  };\n\n  return (\n    <form>\n      <div>\n        {/* React.createElement('label', { htmlFor: 'color-name-input' }, 'Color Name:') */}\n        <label htmlFor=\"color-name-input\">Color Name:</label>\n        <input type=\"text\" id=\"color-name-input\" name=\"name\" value={colorForm.name} onChange={change} />\n      </div>\n      <div>\n        {/* React.createElement('label', { htmlFor: 'color-name-input' }, 'Color Name:') */}\n        <label htmlFor=\"color-hexcode-input\">Color Hexcode:</label>\n        <input type=\"text\" id=\"color-hexcode-input\" name=\"hexcode\" value={colorForm.hexcode} onChange={change} />\n      </div>\n      <button type=\"button\" onClick={submitColor}>\n        {props.buttonText}\n      </button>\n    </form>\n  );\n\n};","import React from 'react';\n\nimport { useList } from '../hooks/useList';\nimport { ToolHeader } from './ToolHeader';\nimport { ColorForm } from './ColorForm';\n\nexport const ColorTool = (props) => {\n\n  const [ colors, addColor ] = useList(props.colors.concat());\n\n  return (\n    <>\n      <ToolHeader headerText=\"Color Tool\" />\n      <ul>\n        {colors.map(color =>\n          <li key={color.id}>{color.name}</li>)}\n      </ul>\n      <ColorForm\n        onSubmitColor={addColor}\n        buttonText=\"Add Color\" />\n    </>\n  );\n\n};","import React from 'react';\n\nexport const CarViewRow = ({\n  car,\n  onEditCar: editCar,\n  onDeleteCar: deleteCar,\n}) => {\n\n  return (\n    <tr>\n      <td>{car.id}</td>\n      <td>{car.make}</td>\n      <td>{car.model}</td>\n      <td>{car.year}</td>\n      <td>{car.color}</td>\n      <td>{car.price}</td>\n      <td>\n        <button type=\"button\" onClick={() => editCar(car.id)}>Edit</button>\n        <button type=\"button\" onClick={() => deleteCar(car.id)}>Delete</button>\n      </td>\n    </tr>\n  );\n\n};","import React from 'react';\n\nimport { useForm } from '../hooks/useForm';\n\nexport const CarEditRow = (props) => {\n\n  const [\n    carForm,\n    change\n  ] = useForm({\n    make: props.car.make,\n    model: props.car.model,\n    year: props.car.year,\n    color: props.car.color,\n    price: props.car.price,\n  });\n\n  const saveCar = () => {\n    props.onSaveCar({\n      ...carForm,\n      id: props.car.id,\n    });\n  };\n\n  return (\n    <tr>\n      <td>{props.car.id}</td>\n      <td><input type=\"text\" id=\"edit-make-input\" name=\"make\" value={carForm.make} onChange={change} /></td>\n      <td><input type=\"text\" id=\"edit-model-input\" name=\"model\" value={carForm.model} onChange={change} /></td>\n      <td><input type=\"text\" id=\"edit-year-input\" name=\"year\" value={carForm.year} onChange={change} /></td>\n      <td><input type=\"text\" id=\"edit-color-input\" name=\"color\" value={carForm.color} onChange={change} /></td>\n      <td><input type=\"text\" id=\"edit-price-input\" name=\"price\" value={carForm.price} onChange={change} /></td>\n      <td>\n        <button type=\"button\" onClick={saveCar}>Save</button>\n        <button type=\"button\" onClick={props.onCancelCar}>Cancel</button>\n      </td>\n    </tr>\n  );\n\n};","import React from 'react';\n\nimport { CarViewRow } from './CarViewRow';\nimport { CarEditRow } from './CarEditRow';\n\nexport const CarTable = ({\n  cars, editCarId,\n  onEditCar: editCar,\n  onDeleteCar: deleteCar,\n  onSaveCar: saveCar,\n  onCancelCar: cancelCar,\n}) => {\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>Make</th>\n          <th>Model</th>\n          <th>Year</th>\n          <th>Color</th>\n          <th>Price</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {cars.map(car => car.id === editCarId\n          ? <CarEditRow key={car.id} car={car} onSaveCar={saveCar} onCancelCar={cancelCar} />\n          : <CarViewRow key={car.id} car={car} onEditCar={editCar} onDeleteCar={deleteCar} />)}\n      </tbody>\n    </table>\n  );\n\n}","import React from 'react';\n\nimport { useForm } from '../hooks/useForm';\n\nconst nanToValue = (value) => {\n  if (isNaN(value)){\n    return '';\n  } else {\n    return value;\n  }\n};\n\nexport const CarForm = ({\n  buttonText, onSubmitCar,\n}) => {\n\n  const [ carForm, change, resetCarForm ] = useForm({\n    make: '', model: '', year: 1900, color: '', price: 0,\n  });\n\n  const submitCar = () => {\n    onSubmitCar(carForm);\n    resetCarForm();\n  };\n\n  return (\n    <form>\n      <div>\n        <label>Make:</label>\n        <input type=\"text\" id=\"make-input\" name=\"make\" value={carForm.make} onChange={change} />\n      </div>\n      <div>\n        <label>Model:</label>\n        <input type=\"text\" id=\"model-input\" name=\"model\" value={carForm.model} onChange={change} />\n      </div>\n      <div>\n        <label>Year:</label>\n        <input type=\"number\" id=\"year-input\" name=\"year\" value={nanToValue(carForm.year)} onChange={change} />\n      </div>\n      <div>\n        <label>Color:</label>\n        <input type=\"text\" id=\"color-input\" name=\"color\" value={carForm.color} onChange={change} />\n      </div>\n      <div>\n        <label>Price:</label>\n        <input type=\"number\" id=\"price-input\" name=\"price\" value={nanToValue(carForm.price)} onChange={change} />\n      </div>\n      <button type=\"button\" onClick={submitCar}>{buttonText}</button>\n    </form>\n  );\n\n};","import React from 'react';\n\nimport { useCarStore } from '../hooks/useCarStore';\n\nimport { ToolHeader } from './ToolHeader';\nimport { CarTable } from './CarTable';\nimport { CarForm } from './CarForm';\n\nexport const CarTool = (props) => {\n\n  const {\n    cars, editCarId, appendCar, replaceCar,\n    removeCar, editCar, cancelCar,\n  } = useCarStore(props.cars.concat());\n\n  return (\n    <>\n      <ToolHeader headerText=\"Car Tool\" />\n      <CarTable cars={cars} editCarId={editCarId}\n        onEditCar={editCar} onDeleteCar={removeCar}\n        onSaveCar={replaceCar} onCancelCar={cancelCar} />\n      <CarForm buttonText=\"Add Car\" onSubmitCar={appendCar} />\n    </>\n  );\n\n};","import { useState } from 'react';\nimport { useList } from './useList';\n\nexport const useCarStore = (initialCars) => {\n\n  const [ cars, appendCar, replaceCar, removeCar ] = useList(initialCars);\n  const [ editCarId, setEditCarId ] = useState(-1);\n\n  return {\n    cars,\n    editCarId,\n    appendCar: (car) => {\n      appendCar(car);\n      setEditCarId(-1);\n    },\n    replaceCar: (car) => {\n      replaceCar(car);\n      setEditCarId(-1);\n    },\n    removeCar: (carId) => {\n      removeCar(carId);\n      setEditCarId(-1);\n    },\n    editCar: setEditCarId,\n    cancelCar: () => setEditCarId(-1),\n  };\n\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { ColorTool } from './components/ColorTool';\nimport { CarTool } from './components/CarTool';\n\nconst colorList = [\n  { id: 1, name: 'blue' },\n  { id: 2, name: 'green' },\n  { id: 3, name: 'orange' },\n  { id: 4, name: 'purple' },\n];\n\nconst carList = [\n  { id: 1, make: 'Ford', model: 'Fusion', year: 2019, color: 'white', price: 45000 },\n  { id: 2, make: 'Tesla', model: 'S', year: 2020, color: 'red', price: 120000 },\n];\n\nReactDOM.render(\n  // React.createElement(ColorTool),\n  <>\n    {/* React.createElement(ColorTool, { colors: colorList }) */}\n    <ColorTool colors={colorList} />\n    <CarTool cars={carList} />\n  </>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}